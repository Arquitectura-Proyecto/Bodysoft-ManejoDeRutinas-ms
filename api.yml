#Test with: http://editor.swagger.io/

swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for Routine Managment
  description: Java + MySQL
  license:
    name: Software Architecture, 2020-I
host: host:8080
basePath: /routine-ms
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /register/routine:
    post:
      summary: Creates a new routine
      operationId: createRoutine
      parameters:
        - name: RegisterRoutinePOJO
          in: body
          required: true
          description: Routine Object for Register
          schema:
            $ref: '#/definitions/RegisterRoutinePOJO'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/RegisterRoutinePOJOErrorModel'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/RegisterRoutinePOJOConflictModel'

  /routine/byIdOwner/{idOwner}:
    get:
      summary: Returns all routines with the given idOwner
      operationId: getUserById
      parameters:
        - name: idOwner
          in: path
          description: The id of the owner of the returned routines
          required: true
          type: integer
      responses:
        '200':
          description: Ok
  /routine/update/{idRoutine}:
    put:
      summary: update the routine specified by the idRoutine
      operationId: updateRoutineById
      parameters:
        - name: idRoutine
          in: path
          description: id of the routine wich is going to update
          required: true
          type: integer
        - name: RegisterRoutinePOJO
          in: body
          required: true
          description: Routine Object for Register
          schema:
            $ref: '#/definitions/RegisterRoutinePOJO'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/RegisterRoutinePOJOErrorModel'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/RegisterRoutinePOJOConflictModel'
        '401':
          description: Unauthorized
          schema:
            $ref: "#/definitions/RegisterRoutinePOJOUnauthorizedModel"
  /routine-ms/routine/getAll:
    get:
      summary: Returns all routines registered
      operationId: getAllRoutine
      responses:
        '200':
          description: Ok
  /routine-ms/routine/getByType/{idType}:
    get:
      summary: Returns all routines from a given type
      operationId: getAllRoutinesByIdType
      parameters:
        - name: idType
          in: path
          required: true
          type: integer
          description: id of the type of routine
      responses:
        '200':
          description: Ok

  /routine-ms/routine/raiting/{idRoutine}:
    put:
      summary: let a user to rate a routine
      operationId: raitingRoutine
      parameters:
        - name: idRoutine
          in: path
          required: true
          type: integer
          description: id of the routine to rate
        - name: RaitingRoutinePOJO
          in: body
          required: true
          description: POJO for rate a routine
          schema:
            $ref: '#/definitions/RaitingRoutinePOJO'
      responses:
        '200':
          description: Ok. When the rate was successfull
        '401':
          description: Unauthorized. When the user cannot rate de routine because he has rated it or he has not bougth the routine
        '400':
          description: Bad request. when the body is not rigth or the routine doesnot exist
  /routine-ms/request:
    post:
      summary: let a user request a routine
      operationId: requestRoutine
      parameters:
        - name: RegisterRequestPOJO
          in: body
          required: true
          description: body for register a new request of a routine
          schema:
            $ref: '#/definitions/RegisterRequestPOJO'


      responses:
        '400':
          description: Bad Request. The body has null values or incorrect
        '409':
          description: Conflict . The routine doesnot exist
        '201':
          description: Created
  /routine-ms/request/{idRequest}:
    delete:
      summary: delete a the request given by idRequest
      operationId: deleteRequest
      parameters:
        - name: idRequest
          in: path
          required: true
          type: integer
      responses:
        '409':
          description: Conflict. the request doesnot exist
        '200':
          description: Ok. The request has been deleted

  /routine-ms/request/getByRoutine/{idRoutine}:
    get:
      summary: Returns the request from a routine
      operationId: getRequestByIdRoutine
      parameters:
        - name: idRoutine
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: Ok
  /routine-ms/resources/register/{idRoutine}:
    post:
      summary: register a new request
      operationId: registerRequest
      parameters:
        - name: idRoutine
          in: path
          required: true
          type: integer
        - name: RegiterResourcePOJO
          in: body
          required: true
          description: body for register a resource
          schema:
            $ref: "#/definitions/RegisterResourcePOJO"
      responses:
        '400':
          description: Bad request. some element from the body is null or incorrect.
        '201':
          description: Created.
        '409':
          description: Conflict. the routine or the type of the resource doesnot exist.
        '401':
          description: Unauthorized. the person wich is trying to register the resource is not routine's owner
  /routine-ms/resources/getByRoutine/{idRoutine}:
    get:
      summary: return resources from a routine
      operationId: getResourcesByRoutine
      parameters:
        - name: idRoutine
          in: path
          required: true
          type: integer
        - name: GetRoutinePOJO
          in: body
          required: true
          description: body for get resources by routine
          schema:
            $ref: "#/definitions/GetRoutinePOJO"
      responses:
        '400':
          description: Bad request. The routine doesnot exist or some value in body is not correct or null.
        '401':
          description: Unauthorized. The requester has not bougth the routine and is not its owner
        '200':
          description: OK.
  /routine-ms/resources/update/{idResource}:
    put:
      summary: update a resource.
      operationId: updateResource
      parameters:
        - name: idResource
          in: path
          required: true
          type: integer
        - name: RegiterResourcePOJO
          in: body
          required: true
          description: body for update a resource
          schema:
            $ref: "#/definitions/RegisterResourcePOJO"
      responses:
        '400':
          description: Bad Request. some field in the body is null or not correct
        '409':
          description: Conflict. The resource or the resource´s type doesnot exist.
        '401':
          description: Unauthorized. The idOwner doesnot correspond to the resource´s owner
        '200':
          description: ok
  /routine-ms/resources/delete/{idResource}:
    delete:
      summary: delete a resource given by idResource
      operationId: deleteResource
      parameters:
        - name: idResource
          in: path
          required: true
          type: integer
        - name: OwnerPOJO
          in: body
          required: true
          description: body for delete a resource.
          schema:
            $ref: "#/definitions/OwnerPOJO"
      responses:
        '409':
          description: Conflict. The resource doesnot exist.
        '401':
          description: Unauthorized. the requester is not authorized for delete de resource.
        '200':
          description: Ok.
  /routine-ms/user-routine/getAvailable/{idUser}:
    get:
      summary: returns UserRoutines with status available for an user
      operationId



definitions:

  # Users
  User:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
      password:
        type: string

  RegisterRoutinePOJO:
    type: object

    properties:
      idOwner:
        type: integer
        example: 1
      price:
        type: number
      name:
        type: string
      description:
        type: string
      link_preview:
        type: string
      idType:
        type: integer
        example: 1

  UsersList:
    type: object
    required:
      - total
      - list
    properties:
      total:
        type: number
      list:
        type: array
        items:
          $ref: '#/definitions/User'

  # Errors
  RegisterRoutinePOJOErrorModel:
    type: object
    description: the elements of body are null or dont match with their types
    required:
      - idOwner
      - price
      - name
      - description
      - link_preview
      - idType
    properties:
      idOwner:
        type: integer
        example: 1
      price:
        type: number
        example: -2
      name:
        type: object
      description:
        type: string
      link_preview:
        type: string
      idType:
        type: integer
  RegisterRoutinePOJOConflictModel:
    type: object
    description: The type of routine doesnot exist or if you are updating the routine doesnot exist
    required:
      - idOwner
      - price
      - name
      - description
      - link_preview
      - idType
    properties:
      idOwner:
        type: integer
        example: 1
        minimum: 1
      price:
        type: number
        minimun: 0
      name:
        type: string
      description:
        type: string
      link_preview:
        type: string
      idType:
        type: integer
        example: 0
        minimun: 1
  RegisterRoutinePOJOUnauthorizedModel:
    type: object
    description: The user with idOwner is not the routine's owner
    required:
      - idOwner
      - price
      - name
      - description
      - link_preview
      - idType
    properties:
      idOwner:
        type: integer
        example: 0
        minimum: 1
      price:
        type: number
        minimun: 0
      name:
        type: string
      description:
        type: string
      link_preview:
        type: string
      idType:
        type: integer
        example: 0
        minimun: 1
  RaitingRoutinePOJO:
    type: object
    required:
      - raiting
      - idUser
    properties:
      raiting:
        type: number
        example: 1.2
      idUser:
        type: integer
        example: 1
  RegisterRequestPOJO:
    type: object
    required:
      -idRoutine
      -idUser
    properties:
      idRoutine:
        type: integer
        example: 1
      idUser:
        type: integer
        example: 1
  RegisterResourcePOJO:
    type: object
    required:
      -link
      -title
      -description
      -position
      -idType
      -idOwner
    properties:
      link:
        type: string
        example: "htttp://www.miimagen.com/"
      title:
        type: string
      description:
        type: string
      position:
        type: integer
      idType:
        type: integer
      idOwner:
        type: integer


  GetRoutinePOJO:
    type: object
    required:
      -idRequester
    properties:
      idRequester:
        type: integer
        example: 1
  OwnerPOJO:
    type: object
    required:
      -idOwner
    properties:
      idOwner:
        type: integer
        example: 1
